// This file is generated by atrium-codegen. DO NOT EDIT.
//!Definitions for the `tools.ozone.moderation.queryStatuses` namespace.
pub const NSID: &str = "tools.ozone.moderation.queryStatuses";
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ParametersData {
    ///Get subjects in unresolved appealed status
    #[serde(skip_serializing_if = "Option::is_none")]
    pub appealed: Option<bool>,
    ///Search subjects by keyword from comments
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cursor: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub exclude_tags: Option<Vec<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ignore_subjects: Option<Vec<String>>,
    ///All subjects belonging to the account specified in the 'subject' param will be returned.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub include_all_user_records: Option<bool>,
    ///By default, we don't include muted subjects in the results. Set this to true to include them.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub include_muted: Option<bool>,
    ///Get all subject statuses that were reviewed by a specific moderator
    #[serde(skip_serializing_if = "Option::is_none")]
    pub last_reviewed_by: Option<crate::types::string::Did>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub limit: Option<crate::types::LimitedNonZeroU8<100u8>>,
    ///When set to true, only muted subjects and reporters will be returned.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub only_muted: Option<bool>,
    ///Search subjects reported after a given timestamp
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reported_after: Option<crate::types::string::Datetime>,
    ///Search subjects reported before a given timestamp
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reported_before: Option<crate::types::string::Datetime>,
    ///Specify when fetching subjects in a certain state
    #[serde(skip_serializing_if = "Option::is_none")]
    pub review_state: Option<String>,
    ///Search subjects reviewed after a given timestamp
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewed_after: Option<crate::types::string::Datetime>,
    ///Search subjects reviewed before a given timestamp
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewed_before: Option<crate::types::string::Datetime>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sort_direction: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sort_field: Option<String>,
    ///The subject to get the status for.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    ///Get subjects that were taken down
    #[serde(skip_serializing_if = "Option::is_none")]
    pub takendown: Option<bool>,
}
pub type Parameters = crate::types::Object<ParametersData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct OutputData {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cursor: Option<String>,
    pub subject_statuses: Vec<crate::tools::ozone::moderation::defs::SubjectStatusView>,
}
pub type Output = crate::types::Object<OutputData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {}
impl std::fmt::Display for Error {
    fn fmt(&self, _f: &mut std::fmt::Formatter) -> std::fmt::Result {
        Ok(())
    }
}

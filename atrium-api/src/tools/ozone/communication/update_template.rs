// @generated - This file is generated by atrium-codegen. DO NOT EDIT.
//!Definitions for the `tools.ozone.communication.updateTemplate` namespace.
pub const NSID: &str = "tools.ozone.communication.updateTemplate";
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct InputData {
    ///Content of the template, markdown supported, can contain variable placeholders.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_markdown: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    ///ID of the template to be updated.
    pub id: String,
    ///Message language.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub lang: Option<crate::types::string::Language>,
    ///Name of the template.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    ///Subject of the message, used in emails.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    ///DID of the user who is updating the template.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<crate::types::string::Did>,
}
pub type Input = crate::types::Object<InputData>;
pub type Output = crate::tools::ozone::communication::defs::TemplateView;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {
    DuplicateTemplateName(Option<String>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, _f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Error::DuplicateTemplateName(msg) => {
                write!(_f, "DuplicateTemplateName")?;
                if let Some(msg) = msg {
                    write!(_f, ": {msg}")?;
                }
            }
        }
        Ok(())
    }
}

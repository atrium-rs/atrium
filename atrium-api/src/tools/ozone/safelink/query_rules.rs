// @generated - This file is generated by atrium-codegen. DO NOT EDIT.
//!Definitions for the `tools.ozone.safelink.queryRules` namespace.
pub const NSID: &str = "tools.ozone.safelink.queryRules";
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct InputData {
    ///Filter by action types
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub actions: core::option::Option<Vec<String>>,
    ///Filter by rule creator
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub created_by: core::option::Option<crate::types::string::Did>,
    ///Cursor for pagination
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub cursor: core::option::Option<String>,
    ///Maximum number of results to return
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub limit: core::option::Option<crate::types::LimitedNonZeroU8<100u8>>,
    ///Filter by pattern type
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub pattern_type: core::option::Option<String>,
    ///Filter by reason type
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub reason: core::option::Option<String>,
    ///Sort direction
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub sort_direction: core::option::Option<String>,
    ///Filter by specific URLs or domains
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub urls: core::option::Option<Vec<String>>,
}
pub type Input = crate::types::Object<InputData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct OutputData {
    ///Next cursor for pagination. Only present if there are more results.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub cursor: core::option::Option<String>,
    pub rules: Vec<crate::tools::ozone::safelink::defs::UrlRule>,
}
pub type Output = crate::types::Object<OutputData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {}
impl std::fmt::Display for Error {
    fn fmt(&self, _f: &mut std::fmt::Formatter) -> std::fmt::Result {
        Ok(())
    }
}

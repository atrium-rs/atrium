// @generated - This file is generated by atrium-codegen. DO NOT EDIT.
//!Definitions for the `tools.ozone.server.getConfig` namespace.
pub const NSID: &str = "tools.ozone.server.getConfig";
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct OutputData {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub appview: Option<ServiceConfig>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub blob_divert: Option<ServiceConfig>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub chat: Option<ServiceConfig>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub pds: Option<ServiceConfig>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub viewer: Option<ViewerConfig>,
}
pub type Output = crate::types::Object<OutputData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {}
impl std::fmt::Display for Error {
    fn fmt(&self, _f: &mut std::fmt::Formatter) -> std::fmt::Result {
        Ok(())
    }
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ServiceConfigData {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub type ServiceConfig = crate::types::Object<ServiceConfigData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ViewerConfigData {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
}
pub type ViewerConfig = crate::types::Object<ViewerConfigData>;

// @generated - This file is generated by atrium-codegen. DO NOT EDIT.
//!Definitions for the `com.atproto.temp.checkHandleAvailability` namespace.
pub const NSID: &str = "com.atproto.temp.checkHandleAvailability";
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ParametersData {
    ///User-provided birth date. Might be used to build handle suggestions.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub birth_date: core::option::Option<crate::types::string::Datetime>,
    ///User-provided email. Might be used to build handle suggestions.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub email: core::option::Option<String>,
    ///Tentative handle. Will be checked for availability or used to build handle suggestions.
    pub handle: crate::types::string::Handle,
}
pub type Parameters = crate::types::Object<ParametersData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct OutputData {
    ///Echo of the input handle.
    pub handle: crate::types::string::Handle,
    pub result: crate::types::Union<OutputResultRefs>,
}
pub type Output = crate::types::Object<OutputData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {
    ///An invalid email was provided.
    InvalidEmail(Option<String>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, _f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Error::InvalidEmail(msg) => {
                write!(_f, "InvalidEmail")?;
                if let Some(msg) = msg {
                    write!(_f, ": {msg}")?;
                }
            }
        }
        Ok(())
    }
}
///Indicates the provided handle is available.
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ResultAvailableData {}
pub type ResultAvailable = crate::types::Object<ResultAvailableData>;
///Indicates the provided handle is unavailable and gives suggestions of available handles.
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ResultUnavailableData {
    ///List of suggested handles based on the provided inputs.
    pub suggestions: Vec<Suggestion>,
}
pub type ResultUnavailable = crate::types::Object<ResultUnavailableData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SuggestionData {
    pub handle: crate::types::string::Handle,
    ///Method used to build this suggestion. Should be considered opaque to clients. Can be used for metrics.
    pub method: String,
}
pub type Suggestion = crate::types::Object<SuggestionData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum OutputResultRefs {
    #[serde(rename = "com.atproto.temp.checkHandleAvailability#resultAvailable")]
    ResultAvailable(Box<ResultAvailable>),
    #[serde(rename = "com.atproto.temp.checkHandleAvailability#resultUnavailable")]
    ResultUnavailable(Box<ResultUnavailable>),
}

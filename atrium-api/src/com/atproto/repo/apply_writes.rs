// This file is generated by atrium-codegen. DO NOT EDIT.
#![doc = "Definitions for the `com.atproto.repo.applyWrites` namespace."]
#[doc = "`com.atproto.repo.applyWrites`"]
#[doc = "Apply a batch transaction of creates, updates, and deletes."]
#[async_trait::async_trait]
pub trait ApplyWrites: crate::xrpc::XrpcClient {
    async fn apply_writes(&self, input: Input) -> Result<(), Box<dyn std::error::Error>> {
        let _ = crate::xrpc::XrpcClient::send::<Error>(
            self,
            http::Method::POST,
            "com.atproto.repo.applyWrites",
            None,
            Some(serde_json::to_vec(&input)?),
            Some(String::from("application/json")),
        )
        .await?;
        Ok(())
    }
}
#[derive(serde :: Serialize, serde :: Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Input {
    #[doc = "The handle or DID of the repo."]
    pub repo: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub swap_commit: Option<String>,
    #[doc = "Validate the records?"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub validate: Option<bool>,
    pub writes: Vec<InputWritesItem>,
}
#[derive(serde :: Serialize, serde :: Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {
    InvalidSwap(Option<String>),
}
#[doc = "`com.atproto.repo.applyWrites#create`"]
#[doc = "Create a new record."]
#[derive(serde :: Serialize, serde :: Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Create {
    pub collection: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rkey: Option<String>,
    pub value: crate::records::Record,
}
#[doc = "`com.atproto.repo.applyWrites#delete`"]
#[doc = "Delete an existing record."]
#[derive(serde :: Serialize, serde :: Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Delete {
    pub collection: String,
    pub rkey: String,
}
#[doc = "`com.atproto.repo.applyWrites#update`"]
#[doc = "Update an existing record."]
#[derive(serde :: Serialize, serde :: Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Update {
    pub collection: String,
    pub rkey: String,
    pub value: crate::records::Record,
}
#[derive(serde :: Serialize, serde :: Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum InputWritesItem {
    #[serde(rename = "com.atproto.repo.applyWrites#create")]
    Create(Box<Create>),
    #[serde(rename = "com.atproto.repo.applyWrites#update")]
    Update(Box<Update>),
    #[serde(rename = "com.atproto.repo.applyWrites#delete")]
    Delete(Box<Delete>),
}

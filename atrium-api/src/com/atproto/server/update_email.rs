// This file is generated by atrium-codegen. DO NOT EDIT.
//!Definitions for the `com.atproto.server.updateEmail` namespace.
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Input {
    pub email: String,
    ///Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub token: Option<String>,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {
    ExpiredToken(Option<String>),
    InvalidToken(Option<String>),
    TokenRequired(Option<String>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, _f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Error::ExpiredToken(msg) => {
                write!(_f, "ExpiredToken")?;
                if let Some(msg) = msg {
                    write!(_f, ": {msg}")?;
                }
            }
            Error::InvalidToken(msg) => {
                write!(_f, "InvalidToken")?;
                if let Some(msg) = msg {
                    write!(_f, ": {msg}")?;
                }
            }
            Error::TokenRequired(msg) => {
                write!(_f, "TokenRequired")?;
                if let Some(msg) = msg {
                    write!(_f, ": {msg}")?;
                }
            }
        }
        Ok(())
    }
}

// This file is generated by atrium-codegen. DO NOT EDIT.
#![doc = "Definitions for the `com.atproto.server.createAccount` namespace."]
#[doc = "`com.atproto.server.createAccount`"]
#[doc = "Create an account."]
#[async_trait::async_trait]
pub trait CreateAccount: crate::xrpc::XrpcClient {
    async fn create_account(&self, input: Input) -> Result<Output, crate::xrpc::Error<Error>> {
        let body = crate::xrpc::XrpcClient::send(
            self,
            http::Method::POST,
            "com.atproto.server.createAccount",
            None,
            Some(serde_json::to_vec(&input)?),
            Some(String::from("application/json")),
        )
        .await?;
        serde_json::from_slice(&body).map_err(|e| e.into())
    }
}
#[derive(serde :: Serialize, serde :: Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Input {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub did: Option<String>,
    pub email: String,
    pub handle: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub invite_code: Option<String>,
    pub password: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recovery_key: Option<String>,
}
#[derive(serde :: Serialize, serde :: Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Output {
    pub access_jwt: String,
    pub did: String,
    pub handle: String,
    pub refresh_jwt: String,
}
#[derive(serde :: Serialize, serde :: Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {
    InvalidHandle(Option<String>),
    InvalidPassword(Option<String>),
    InvalidInviteCode(Option<String>),
    HandleNotAvailable(Option<String>),
    UnsupportedDomain(Option<String>),
    UnresolvableDid(Option<String>),
    IncompatibleDidDoc(Option<String>),
}

// This file is generated by atrium-codegen. DO NOT EDIT.
#![doc = "Definitions for the `com.atproto.server.createInviteCodes` namespace."]
#[doc = "`com.atproto.server.createInviteCodes`"]
#[doc = "Create an invite code."]
#[async_trait::async_trait]
pub trait CreateInviteCodes: crate::xrpc::XrpcClient {
    async fn create_invite_codes(&self, input: Input) -> Result<Output, crate::xrpc::Error<Error>> {
        let body = crate::xrpc::XrpcClient::send(
            self,
            http::Method::POST,
            "com.atproto.server.createInviteCodes",
            None,
            Some(serde_json::to_vec(&input)?),
            Some(String::from("application/json")),
        )
        .await?;
        serde_json::from_slice(&body).map_err(|e| e.into())
    }
}
#[derive(serde :: Serialize, serde :: Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Input {
    pub code_count: i32,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub for_accounts: Option<Vec<String>>,
    pub use_count: i32,
}
#[derive(serde :: Serialize, serde :: Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Output {
    pub codes: Vec<AccountCodes>,
}
#[derive(serde :: Serialize, serde :: Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {}
#[doc = "`com.atproto.server.createInviteCodes#accountCodes`"]
#[derive(serde :: Serialize, serde :: Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct AccountCodes {
    pub account: String,
    pub codes: Vec<String>,
}

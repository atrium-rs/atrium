// This file is generated by atrium-codegen. DO NOT EDIT.
//!Definitions for the `com.atproto.admin.defs` namespace.
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct AccountView {
    pub did: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub email_confirmed_at: Option<String>,
    pub handle: String,
    pub indexed_at: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub invite_note: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub invited_by: Option<crate::com::atproto::server::defs::InviteCode>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub invites: Option<Vec<crate::com::atproto::server::defs::InviteCode>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub invites_disabled: Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct BlobView {
    pub cid: String,
    pub created_at: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub details: Option<BlobViewDetailsEnum>,
    pub mime_type: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub moderation: Option<Moderation>,
    pub size: i32,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ImageDetails {
    pub height: i32,
    pub width: i32,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventAcknowledge {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
}
///Add a comment to a subject
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventComment {
    pub comment: String,
    ///Make the comment persistent on the subject
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sticky: Option<bool>,
}
///Keep a log of outgoing email to a user
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventEmail {
    ///Additional comment about the outgoing comm.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    ///The subject line of the email sent to the user.
    pub subject_line: String,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventEscalate {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
}
///Apply/Negate labels on a subject
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventLabel {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    pub create_label_vals: Vec<String>,
    pub negate_label_vals: Vec<String>,
}
///Mute incoming reports on a subject
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventMute {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    ///Indicates how long the subject should remain muted.
    pub duration_in_hours: i32,
}
///Report a subject
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventReport {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    pub report_type: crate::com::atproto::moderation::defs::ReasonType,
}
///Revert take down action on a subject
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventReverseTakedown {
    ///Describe reasoning behind the reversal.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
}
///Take down a subject permanently or temporarily
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventTakedown {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    ///Indicates how long the takedown should be in effect before automatically expiring.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub duration_in_hours: Option<i32>,
}
///Unmute action on a subject
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventUnmute {
    ///Describe reasoning behind the reversal.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventView {
    pub created_at: String,
    pub created_by: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub creator_handle: Option<String>,
    pub event: ModEventViewEventEnum,
    pub id: i32,
    pub subject: ModEventViewSubjectEnum,
    pub subject_blob_cids: Vec<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject_handle: Option<String>,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModEventViewDetail {
    pub created_at: String,
    pub created_by: String,
    pub event: ModEventViewDetailEventEnum,
    pub id: i32,
    pub subject: ModEventViewDetailSubjectEnum,
    pub subject_blobs: Vec<BlobView>,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Moderation {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject_status: Option<SubjectStatusView>,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ModerationDetail {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject_status: Option<SubjectStatusView>,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RecordView {
    pub blob_cids: Vec<String>,
    pub cid: String,
    pub indexed_at: String,
    pub moderation: Moderation,
    pub repo: RepoView,
    pub uri: String,
    pub value: crate::records::Record,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RecordViewDetail {
    pub blobs: Vec<BlobView>,
    pub cid: String,
    pub indexed_at: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<crate::com::atproto::label::defs::Label>>,
    pub moderation: ModerationDetail,
    pub repo: RepoView,
    pub uri: String,
    pub value: crate::records::Record,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RecordViewNotFound {
    pub uri: String,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RepoBlobRef {
    pub cid: String,
    pub did: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub record_uri: Option<String>,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RepoRef {
    pub did: String,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RepoView {
    pub did: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    pub handle: String,
    pub indexed_at: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub invite_note: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub invited_by: Option<crate::com::atproto::server::defs::InviteCode>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub invites_disabled: Option<bool>,
    pub moderation: Moderation,
    pub related_records: Vec<crate::records::Record>,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RepoViewDetail {
    pub did: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub email_confirmed_at: Option<String>,
    pub handle: String,
    pub indexed_at: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub invite_note: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub invited_by: Option<crate::com::atproto::server::defs::InviteCode>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub invites: Option<Vec<crate::com::atproto::server::defs::InviteCode>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub invites_disabled: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<crate::com::atproto::label::defs::Label>>,
    pub moderation: ModerationDetail,
    pub related_records: Vec<crate::records::Record>,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RepoViewNotFound {
    pub did: String,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ReportView {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    pub created_at: String,
    pub id: i32,
    pub reason_type: crate::com::atproto::moderation::defs::ReasonType,
    pub reported_by: String,
    pub resolved_by_action_ids: Vec<i32>,
    pub subject: ReportViewSubjectEnum,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject_repo_handle: Option<String>,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ReportViewDetail {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    pub created_at: String,
    pub id: i32,
    pub reason_type: crate::com::atproto::moderation::defs::ReasonType,
    pub reported_by: String,
    pub resolved_by_actions: Vec<crate::com::atproto::admin::defs::ModEventView>,
    pub subject: ReportViewDetailSubjectEnum,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject_status: Option<crate::com::atproto::admin::defs::SubjectStatusView>,
}
///Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator
pub struct ReviewClosed;
///Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator
pub struct ReviewEscalated;
///Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator
pub struct ReviewOpen;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct StatusAttr {
    pub applied: bool,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub r#ref: Option<String>,
}
pub type SubjectReviewState = String;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SubjectStatusView {
    ///Sticky comment on the subject.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    ///Timestamp referencing the first moderation status impacting event was emitted on the subject
    pub created_at: String,
    pub id: i32,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub last_reported_at: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub last_reviewed_at: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub last_reviewed_by: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mute_until: Option<String>,
    pub review_state: SubjectReviewState,
    pub subject: SubjectStatusViewSubjectEnum,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject_blob_cids: Option<Vec<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject_repo_handle: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub suspend_until: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub takendown: Option<bool>,
    ///Timestamp referencing when the last update was made to the moderation status of the subject
    pub updated_at: String,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct VideoDetails {
    pub height: i32,
    pub length: i32,
    pub width: i32,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum BlobViewDetailsEnum {
    #[serde(rename = "com.atproto.admin.defs#imageDetails")]
    ImageDetails(Box<ImageDetails>),
    #[serde(rename = "com.atproto.admin.defs#videoDetails")]
    VideoDetails(Box<VideoDetails>),
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum ModEventViewDetailEventEnum {
    #[serde(rename = "com.atproto.admin.defs#modEventTakedown")]
    ModEventTakedown(Box<ModEventTakedown>),
    #[serde(rename = "com.atproto.admin.defs#modEventReverseTakedown")]
    ModEventReverseTakedown(Box<ModEventReverseTakedown>),
    #[serde(rename = "com.atproto.admin.defs#modEventComment")]
    ModEventComment(Box<ModEventComment>),
    #[serde(rename = "com.atproto.admin.defs#modEventReport")]
    ModEventReport(Box<ModEventReport>),
    #[serde(rename = "com.atproto.admin.defs#modEventLabel")]
    ModEventLabel(Box<ModEventLabel>),
    #[serde(rename = "com.atproto.admin.defs#modEventAcknowledge")]
    ModEventAcknowledge(Box<ModEventAcknowledge>),
    #[serde(rename = "com.atproto.admin.defs#modEventEscalate")]
    ModEventEscalate(Box<ModEventEscalate>),
    #[serde(rename = "com.atproto.admin.defs#modEventMute")]
    ModEventMute(Box<ModEventMute>),
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum ModEventViewDetailSubjectEnum {
    #[serde(rename = "com.atproto.admin.defs#repoView")]
    RepoView(Box<RepoView>),
    #[serde(rename = "com.atproto.admin.defs#repoViewNotFound")]
    RepoViewNotFound(Box<RepoViewNotFound>),
    #[serde(rename = "com.atproto.admin.defs#recordView")]
    RecordView(Box<RecordView>),
    #[serde(rename = "com.atproto.admin.defs#recordViewNotFound")]
    RecordViewNotFound(Box<RecordViewNotFound>),
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum ModEventViewEventEnum {
    #[serde(rename = "com.atproto.admin.defs#modEventTakedown")]
    ModEventTakedown(Box<ModEventTakedown>),
    #[serde(rename = "com.atproto.admin.defs#modEventReverseTakedown")]
    ModEventReverseTakedown(Box<ModEventReverseTakedown>),
    #[serde(rename = "com.atproto.admin.defs#modEventComment")]
    ModEventComment(Box<ModEventComment>),
    #[serde(rename = "com.atproto.admin.defs#modEventReport")]
    ModEventReport(Box<ModEventReport>),
    #[serde(rename = "com.atproto.admin.defs#modEventLabel")]
    ModEventLabel(Box<ModEventLabel>),
    #[serde(rename = "com.atproto.admin.defs#modEventAcknowledge")]
    ModEventAcknowledge(Box<ModEventAcknowledge>),
    #[serde(rename = "com.atproto.admin.defs#modEventEscalate")]
    ModEventEscalate(Box<ModEventEscalate>),
    #[serde(rename = "com.atproto.admin.defs#modEventMute")]
    ModEventMute(Box<ModEventMute>),
    #[serde(rename = "com.atproto.admin.defs#modEventEmail")]
    ModEventEmail(Box<ModEventEmail>),
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum ModEventViewSubjectEnum {
    #[serde(rename = "com.atproto.admin.defs#repoRef")]
    RepoRef(Box<RepoRef>),
    #[serde(rename = "com.atproto.repo.strongRef")]
    ComAtprotoRepoStrongRefMain(Box<crate::com::atproto::repo::strong_ref::Main>),
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum ReportViewDetailSubjectEnum {
    #[serde(rename = "com.atproto.admin.defs#repoView")]
    RepoView(Box<RepoView>),
    #[serde(rename = "com.atproto.admin.defs#repoViewNotFound")]
    RepoViewNotFound(Box<RepoViewNotFound>),
    #[serde(rename = "com.atproto.admin.defs#recordView")]
    RecordView(Box<RecordView>),
    #[serde(rename = "com.atproto.admin.defs#recordViewNotFound")]
    RecordViewNotFound(Box<RecordViewNotFound>),
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum ReportViewSubjectEnum {
    #[serde(rename = "com.atproto.admin.defs#repoRef")]
    RepoRef(Box<RepoRef>),
    #[serde(rename = "com.atproto.repo.strongRef")]
    ComAtprotoRepoStrongRefMain(Box<crate::com::atproto::repo::strong_ref::Main>),
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum SubjectStatusViewSubjectEnum {
    #[serde(rename = "com.atproto.admin.defs#repoRef")]
    RepoRef(Box<RepoRef>),
    #[serde(rename = "com.atproto.repo.strongRef")]
    ComAtprotoRepoStrongRefMain(Box<crate::com::atproto::repo::strong_ref::Main>),
}

// This file is generated by atrium-codegen. DO NOT EDIT.
//!Definitions for the `com.atproto.admin.queryModerationStatuses` namespace.
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Parameters {
    ///Get subjects in unresolved appealed status
    #[serde(skip_serializing_if = "Option::is_none")]
    pub appealed: Option<bool>,
    ///Search subjects by keyword from comments
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cursor: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ignore_subjects: Option<Vec<String>>,
    ///By default, we don't include muted subjects in the results. Set this to true to include them.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub include_muted: Option<bool>,
    ///Get all subject statuses that were reviewed by a specific moderator
    #[serde(skip_serializing_if = "Option::is_none")]
    pub last_reviewed_by: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    ///Search subjects reported after a given timestamp
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reported_after: Option<String>,
    ///Search subjects reported before a given timestamp
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reported_before: Option<String>,
    ///Specify when fetching subjects in a certain state
    #[serde(skip_serializing_if = "Option::is_none")]
    pub review_state: Option<String>,
    ///Search subjects reviewed after a given timestamp
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewed_after: Option<String>,
    ///Search subjects reviewed before a given timestamp
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reviewed_before: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sort_direction: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sort_field: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    ///Get subjects that were taken down
    #[serde(skip_serializing_if = "Option::is_none")]
    pub takendown: Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Output {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cursor: Option<String>,
    pub subject_statuses: Vec<crate::com::atproto::admin::defs::SubjectStatusView>,
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {}

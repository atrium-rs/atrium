// @generated - This file is generated by atrium-codegen. DO NOT EDIT.
//!Definitions for the `app.bsky.notification.putPreferencesV2` namespace.
pub const NSID: &str = "app.bsky.notification.putPreferencesV2";
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct InputData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub chat: core::option::Option<crate::app::bsky::notification::defs::ChatPreference>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub follow: core::option::Option<
        crate::app::bsky::notification::defs::FilterablePreference,
    >,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub like: core::option::Option<
        crate::app::bsky::notification::defs::FilterablePreference,
    >,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub like_via_repost: core::option::Option<
        crate::app::bsky::notification::defs::FilterablePreference,
    >,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub mention: core::option::Option<
        crate::app::bsky::notification::defs::FilterablePreference,
    >,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub quote: core::option::Option<
        crate::app::bsky::notification::defs::FilterablePreference,
    >,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub reply: core::option::Option<
        crate::app::bsky::notification::defs::FilterablePreference,
    >,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub repost: core::option::Option<
        crate::app::bsky::notification::defs::FilterablePreference,
    >,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub repost_via_repost: core::option::Option<
        crate::app::bsky::notification::defs::FilterablePreference,
    >,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub starterpack_joined: core::option::Option<
        crate::app::bsky::notification::defs::Preference,
    >,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub subscribed_post: core::option::Option<
        crate::app::bsky::notification::defs::Preference,
    >,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub unverified: core::option::Option<
        crate::app::bsky::notification::defs::Preference,
    >,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub verified: core::option::Option<crate::app::bsky::notification::defs::Preference>,
}
pub type Input = crate::types::Object<InputData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct OutputData {
    pub preferences: crate::app::bsky::notification::defs::Preferences,
}
pub type Output = crate::types::Object<OutputData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {}
impl std::fmt::Display for Error {
    fn fmt(&self, _f: &mut std::fmt::Formatter) -> std::fmt::Result {
        Ok(())
    }
}

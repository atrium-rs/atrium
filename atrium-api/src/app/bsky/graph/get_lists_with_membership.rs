// @generated - This file is generated by atrium-codegen. DO NOT EDIT.
//!Definitions for the `app.bsky.graph.getListsWithMembership` namespace.
pub const NSID: &str = "app.bsky.graph.getListsWithMembership";
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ParametersData {
    ///The account (actor) to check for membership.
    pub actor: crate::types::string::AtIdentifier,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub cursor: core::option::Option<String>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub limit: core::option::Option<crate::types::LimitedNonZeroU8<100u8>>,
    ///Optional filter by list purpose. If not specified, all supported types are returned.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub purposes: core::option::Option<Vec<String>>,
}
pub type Parameters = crate::types::Object<ParametersData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct OutputData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub cursor: core::option::Option<String>,
    pub lists_with_membership: Vec<ListWithMembership>,
}
pub type Output = crate::types::Object<OutputData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {}
impl std::fmt::Display for Error {
    fn fmt(&self, _f: &mut std::fmt::Formatter) -> std::fmt::Result {
        Ok(())
    }
}
///A list and an optional list item indicating membership of a target user to that list.
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ListWithMembershipData {
    pub list: crate::app::bsky::graph::defs::ListView,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub list_item: core::option::Option<crate::app::bsky::graph::defs::ListItemView>,
}
pub type ListWithMembership = crate::types::Object<ListWithMembershipData>;

// This file is generated by atrium-codegen. DO NOT EDIT.
#![doc = "Definitions for the `app.bsky.unspecced.searchActorsSkeleton` namespace."]
#[derive(serde :: Serialize, serde :: Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Parameters {
    #[doc = "optional pagination mechanism; may not necessarily allow scrolling through entire result set"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cursor: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    #[doc = "search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. For typeahead search, only simple term match is supported, not full syntax"]
    pub q: String,
    #[doc = "if true, acts as fast/simple 'typeahead' query"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub typeahead: Option<bool>,
}
#[derive(serde :: Serialize, serde :: Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct Output {
    pub actors: Vec<crate::app::bsky::unspecced::defs::SkeletonSearchActor>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cursor: Option<String>,
    #[doc = "count of search hits. optional, may be rounded/truncated, and may not be possible to paginate through all hits"]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hits_total: Option<i32>,
}
#[derive(serde :: Serialize, serde :: Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {
    BadQueryString(Option<String>),
}

// @generated - This file is generated by atrium-codegen. DO NOT EDIT.
//!Definitions for the `app.bsky.unspecced.defs` namespace.
///Object used to store age assurance data in stash.
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct AgeAssuranceEventData {
    ///The unique identifier for this instance of the age assurance flow, in UUID format.
    pub attempt_id: String,
    ///The IP address used when completing the AA flow.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub complete_ip: core::option::Option<String>,
    ///The user agent used when completing the AA flow.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub complete_ua: core::option::Option<String>,
    ///The date and time of this write operation.
    pub created_at: crate::types::string::Datetime,
    ///The email used for AA.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub email: core::option::Option<String>,
    ///The IP address used when initiating the AA flow.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub init_ip: core::option::Option<String>,
    ///The user agent used when initiating the AA flow.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub init_ua: core::option::Option<String>,
    ///The status of the age assurance process.
    pub status: String,
}
pub type AgeAssuranceEvent = crate::types::Object<AgeAssuranceEventData>;
///The computed state of the age assurance process, returned to the user in question on certain authenticated requests.
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct AgeAssuranceStateData {
    ///The timestamp when this state was last updated.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub last_initiated_at: core::option::Option<crate::types::string::Datetime>,
    ///The status of the age assurance process.
    pub status: String,
}
pub type AgeAssuranceState = crate::types::Object<AgeAssuranceStateData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SkeletonSearchActorData {
    pub did: crate::types::string::Did,
}
pub type SkeletonSearchActor = crate::types::Object<SkeletonSearchActorData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SkeletonSearchPostData {
    pub uri: String,
}
pub type SkeletonSearchPost = crate::types::Object<SkeletonSearchPostData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SkeletonSearchStarterPackData {
    pub uri: String,
}
pub type SkeletonSearchStarterPack = crate::types::Object<SkeletonSearchStarterPackData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct SkeletonTrendData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub category: core::option::Option<String>,
    pub dids: Vec<crate::types::string::Did>,
    pub display_name: String,
    pub link: String,
    pub post_count: i64,
    pub started_at: crate::types::string::Datetime,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub status: core::option::Option<String>,
    pub topic: String,
}
pub type SkeletonTrend = crate::types::Object<SkeletonTrendData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ThreadItemBlockedData {
    pub author: crate::app::bsky::feed::defs::BlockedAuthor,
}
pub type ThreadItemBlocked = crate::types::Object<ThreadItemBlockedData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ThreadItemNoUnauthenticatedData {}
pub type ThreadItemNoUnauthenticated = crate::types::Object<ThreadItemNoUnauthenticatedData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ThreadItemNotFoundData {}
pub type ThreadItemNotFound = crate::types::Object<ThreadItemNotFoundData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ThreadItemPostData {
    ///The threadgate created by the author indicates this post as a reply to be hidden for everyone consuming the thread.
    pub hidden_by_threadgate: bool,
    ///This post has more parents that were not present in the response. This is just a boolean, without the number of parents.
    pub more_parents: bool,
    ///This post has more replies that were not present in the response. This is a numeric value, which is best-effort and might not be accurate.
    pub more_replies: i64,
    ///This is by an account muted by the viewer requesting it.
    pub muted_by_viewer: bool,
    ///This post is part of a contiguous thread by the OP from the thread root. Many different OP threads can happen in the same thread.
    pub op_thread: bool,
    pub post: crate::app::bsky::feed::defs::PostView,
}
pub type ThreadItemPost = crate::types::Object<ThreadItemPostData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct TrendViewData {
    pub actors: Vec<crate::app::bsky::actor::defs::ProfileViewBasic>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub category: core::option::Option<String>,
    pub display_name: String,
    pub link: String,
    pub post_count: i64,
    pub started_at: crate::types::string::Datetime,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub status: core::option::Option<String>,
    pub topic: String,
}
pub type TrendView = crate::types::Object<TrendViewData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct TrendingTopicData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub description: core::option::Option<String>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub display_name: core::option::Option<String>,
    pub link: String,
    pub topic: String,
}
pub type TrendingTopic = crate::types::Object<TrendingTopicData>;
